#!/usr/bin/env python
"""Convert SOMA alignments to the maligner format"""

import argparse
from itertools import islice
import os, sys
import numpy as np
import pandas
from pandas import DataFrame

from malignpy.common import wrap_file_function, logging_utils
from malignpy.maps.utils import read_maps
from malignpy.core.maligner_dp_alignments import Alignment

logger = logging_utils.create_logger('alignments_soma_to_maligner')


parser = argparse.ArgumentParser(description="""Convert SOMA alignments to the maligner format""")
parser.add_argument('alns_file', metavar='ALIGNMENTS_FILE', type=str,
                   help='Alignments file. Use "-" for STDIN')
# parser.add_argument('ref_maps', metavar='REF_MAP_FILE', type=str,
#                    help='Reference map file.')
# parser.add_argument('query_maps', metavar='QUERY_MAP_FILE', type=str,
#                    help='Query map file.')
parser.add_argument('-o', '--output', metavar='OUTPUT_FILE', help = "Output file name. (Default: STDOUT)")



@wrap_file_function('r', 'w')
def alignment_chunks(aln_file, output_file):
  pass

if __name__ == '__main__':

  args = parser.parse_args()

  output_file = args.output if args.output is not None else sys.stdout
  input_file = args.alns_file if (args.alns_file is not None and args.alns_file != '-') else sys.stdin

  logger.info('Alignment file: %s', "STDIN" if input_file == sys.stdin else args.alns_file)
  # logger.info('Query map file: %s', args.query_maps)
  # logger.info('Ref maps file: %s', args.ref_maps)
  logger.info('Output file: %s', 'STDOUT' if args.output is None else args.output)


  logger.info('Extracting alignment chunks... (patience)')
  alignment_chunks(input_file, output_file)
